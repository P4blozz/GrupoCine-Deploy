const mysql = require('mysql2/promise');
require('dotenv').config();

// Configura√ß√£o da conex√£o com o MySQL Railway
const isProduction = process.env.NODE_ENV === 'production';
const isRailwayHost = process.env.DB_HOST && (process.env.DB_HOST.includes('railway') || process.env.DB_HOST.includes('proxy.rlwy'));

// Configura√ß√£o otimizada para Railway
const dbConfig = {
    host: process.env.DB_HOST || process.env.MYSQLHOST || 'localhost',
    user: process.env.DB_USER || process.env.MYSQLUSER || 'root',
    password: process.env.DB_PASSWORD || process.env.MYSQLPASSWORD || '',
    database: process.env.DB_NAME || process.env.MYSQL_DATABASE || process.env.MYSQLDATABASE || 'railway',
    port: parseInt(process.env.DB_PORT || process.env.MYSQLPORT) || 3306,
    timezone: '+00:00',
    waitForConnections: true,
    connectionLimit: 10,
    queueLimit: 0,
    // SSL obrigat√≥rio para Railway
    ssl: isRailwayHost ? { rejectUnauthorized: false } : false,
    connectTimeout: 60000,
    // Configura√ß√µes espec√≠ficas para Railway
    multipleStatements: true,
    dateStrings: true
};

// Criar pool de conex√µes
const pool = mysql.createPool(dbConfig);

// Fun√ß√£o para testar a conex√£o
async function testConnection() {
    try {
        const connection = await pool.getConnection();
        console.log('‚úÖ Conex√£o com MySQL estabelecida com sucesso!');
        console.log(`üìç Conectado em: ${dbConfig.host}:${dbConfig.port}`);
        console.log(`üíæ Banco de dados: ${dbConfig.database}`);
        connection.release();
        return true;
    } catch (error) {
        console.error('‚ùå Erro ao conectar com MySQL:', error.message);
        
        // Se for timeout, pode ser que o servi√ßo esteja "dormindo"
        if (error.message.includes('ETIMEDOUT')) {
            console.log('üí° O servi√ßo MySQL pode estar em standby. Ele ser√° ativado automaticamente no Railway.');
        }
        
        return false;
    }
}

// Fun√ß√£o para executar queries
async function executeQuery(query, params = []) {
    try {
        const [results] = await pool.execute(query, params);
        return results;
    } catch (error) {
        console.error('Erro ao executar query:', error);
        throw error;
    }
}

// Fun√ß√£o para gerar c√≥digo √∫nico alfanum√©rico
function generateUniqueCode() {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let result = '';
    for (let i = 0; i < 5; i++) {
        result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
}

module.exports = {
    pool,
    testConnection,
    executeQuery,
    generateUniqueCode
};
